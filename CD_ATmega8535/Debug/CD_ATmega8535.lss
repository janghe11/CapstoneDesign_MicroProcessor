
CD_ATmega8535.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000015c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  00000200  2**0
                  ALLOC
  3 .stab         00000660  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bca  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ec e5       	ldi	r30, 0x5C	; 92
  3e:	f1 e0       	ldi	r31, 0x01	; 1
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a0 37       	cpi	r26, 0x70	; 112
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a0 e7       	ldi	r26, 0x70	; 112
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a3 37       	cpi	r26, 0x73	; 115
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	4a d0       	rcall	.+148    	; 0xf2 <main>
  5e:	7c c0       	rjmp	.+248    	; 0x158 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <keyScan>:
unsigned char KCODE[16] = {0x00, 0x04, 0x08, 0x0c, 0x01, 0x05, 0x09, 0x0d,
		0x02, 0x06, 0x0a, 0x0e, 0x03, 0x07, 0x0b, 0x0f};

// Catch 4x4 Hex Keypad Input
void keyScan(void)
{
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	00 d0       	rcall	.+0      	; 0x68 <keyScan+0x6>
  68:	1f 92       	push	r1
  6a:	cd b7       	in	r28, 0x3d	; 61
  6c:	de b7       	in	r29, 0x3e	; 62
	unsigned char i, temp, key1;
	KEY = key1 = 0;
  6e:	1a 82       	std	Y+2, r1	; 0x02
  70:	8a 81       	ldd	r24, Y+2	; 0x02
  72:	80 93 71 00 	sts	0x0071, r24
	FLAG = 1;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	80 93 72 00 	sts	0x0072, r24
	PORTA = 0xfe;
  7c:	8b e3       	ldi	r24, 0x3B	; 59
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	2e ef       	ldi	r18, 0xFE	; 254
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	asm ("nop");
  86:	00 00       	nop
	asm ("nop");
  88:	00 00       	nop
	temp = PINA;
  8a:	89 e3       	ldi	r24, 0x39	; 57
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	80 81       	ld	r24, Z
  92:	8b 83       	std	Y+3, r24	; 0x03
	temp = (temp >> 4) | 0xf0;
  94:	8b 81       	ldd	r24, Y+3	; 0x03
  96:	82 95       	swap	r24
  98:	8f 70       	andi	r24, 0x0F	; 15
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	8b 83       	std	Y+3, r24	; 0x03
	for(i = 0; i < 4; i++)
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	14 c0       	rjmp	.+40     	; 0xca <keyScan+0x68>
	{
		if(!(temp & 0x01))
  a2:	8b 81       	ldd	r24, Y+3	; 0x03
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	81 70       	andi	r24, 0x01	; 1
  aa:	99 27       	eor	r25, r25
  ac:	00 97       	sbiw	r24, 0x00	; 0
  ae:	29 f4       	brne	.+10     	; 0xba <keyScan+0x58>
		{
			key1 = KEY;
  b0:	80 91 71 00 	lds	r24, 0x0071
  b4:	8a 83       	std	Y+2, r24	; 0x02
			FLAG = 0;
  b6:	10 92 72 00 	sts	0x0072, r1
		}
		temp >> 1;
		KEY++;
  ba:	80 91 71 00 	lds	r24, 0x0071
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 71 00 	sts	0x0071, r24
	PORTA = 0xfe;
	asm ("nop");
	asm ("nop");
	temp = PINA;
	temp = (temp >> 4) | 0xf0;
	for(i = 0; i < 4; i++)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	84 30       	cpi	r24, 0x04	; 4
  ce:	48 f3       	brcs	.-46     	; 0xa2 <keyScan+0x40>
			FLAG = 0;
		}
		temp >> 1;
		KEY++;
	}
	KEY = key1 & 0x0f;
  d0:	8a 81       	ldd	r24, Y+2	; 0x02
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	80 93 71 00 	sts	0x0071, r24
}
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <valveMotor>:

// Rotate Step Motor 180 on/off
int valveMotor(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62

}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <main>:

int main(void)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xff;
  fa:	87 e3       	ldi	r24, 0x37	; 55
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
	DDRC = 0xff;
 104:	84 e3       	ldi	r24, 0x34	; 52
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	DDRA = 0x0f;
 10e:	8a e3       	ldi	r24, 0x3A	; 58
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2f e0       	ldi	r18, 0x0F	; 15
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
	PORTC = 0xff;
 118:	85 e3       	ldi	r24, 0x35	; 53
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	PORTB = 0xff;
 122:	88 e3       	ldi	r24, 0x38	; 56
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
	do {
		keyScan();
 12c:	9a df       	rcall	.-204    	; 0x62 <keyScan>
		if(!(FLAG == 1))
 12e:	80 91 72 00 	lds	r24, 0x0072
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	81 f0       	breq	.+32     	; 0x156 <main+0x64>
		{
			KEY2 = KCODE[KEY];
 136:	80 91 71 00 	lds	r24, 0x0071
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	80 5a       	subi	r24, 0xA0	; 160
 140:	9f 4f       	sbci	r25, 0xFF	; 255
 142:	fc 01       	movw	r30, r24
 144:	80 81       	ld	r24, Z
 146:	80 93 70 00 	sts	0x0070, r24
			PORTB = 0xef;
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	2f ee       	ldi	r18, 0xEF	; 239
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
		}
	}while(1);
 154:	eb cf       	rjmp	.-42     	; 0x12c <main+0x3a>
 156:	ea cf       	rjmp	.-44     	; 0x12c <main+0x3a>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
